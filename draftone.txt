\documentclass{article}
\usepackage{graphicx} % Required for inserting images
\usepackage{multirow}

\title{Hiding Information From The AIs}
\author{Noah Morris}
\date{July 21, 2023}

\usepackage{amsmath}
\usepackage{listings}
\usepackage{color}
\usepackage{setspace}
\usepackage{tikz}
\usepackage{pgfplots}
\usepackage{graphicx}

\linespread{1.2}
\parindent=2em
\parskip=8pt

\lstset{frame=tb,
  language=Python,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}



\begin{document}

\maketitle

\definecolor{dkgreen}{rgb}{0,0.5,0.2}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0,0.6,0.3}

\section{Inspiration}

\hspace{6mm} John Conway defined a Combinatoric Game as one which, among other things, has only two players, no hidden information, and nothing random. Games like this, often also called ``Abstract Strategy Games", have been played for thousands of years on every continent on the planet: some of the most popular are Chess, Go, Mancala, Othello, Checkers, and Tic-Tac-Toe. Some non-examples are Poker, Uno, Spades, and Backgammon. 

Traditional sports and abstract strategy games both, in the modern era, make celebrities of those who excel at them. Any American will tell you Wilt Chamberlain and Bobby Fischer were intelligent men worthy of your respect, because they have both demonstrated themselves masters of a discipline that the American and all of their neighbors have spent a good deal of time thinking about and doing. For the same reasons, the average South Korean will praise Park Yong-taik, and Lee Sedol. Sedol was one of the greatest Go players of all time, winning the second-most International Titles in the game's history, 18. He was the world-class master that Google sought out, in 2016, to play against their AI that they called "AlphaGo". AlphaGo uses a Monte-Carlo Tree Search algorithm, making a Tree of all possible ways that a game can play out, selecting some arbitrary amount of options, and exploring those that look ``promising", evaluating game positions via how likely they are to result in a win. 

This AI (which had many Go-specific additional methods far beyond the scope of this project) won 4/5 games against Sedol, marking, like Deep Blue in 1997, a fundamental change in the cultural understanding of the game. Suddenly, ten years ahead of schedule, humans were not and would likely never again be the greatest Go players in the world. This was strongly evident to Sedol, who said, in a 2019 statement marking his early retirement, that, ``With the debut of AI in Go games, I've realized that I'm not at the top even if I become the number one through frantic efforts ... If I become the number one, there is an entity that cannot be defeated." 

Sedol's somber tone might encourage the reader to become an A.I. Millenarianist, steadfast in the belief that in the not-too-distant future there will exist no problem that a human can solve faster than an algorithm, and that, as soon as that day comes, all remaining humans will be reduced to obsolete souvenirs, entirely domesticated. This sentiment, as one might guess, is incorrect on a few levels. For one, it is my firm belief that one does need to be the greatest at a discipline to enjoy or gain something from it. Secondly, Abstract Strategy Games are complex, but complex in a way that computers are well-equipped for solving, comparatively easy to reduce to a list of numbers. The fun of abstracts, by and large, is that humans find them challenging, in ways that computers don't. There still exist countless tasks, such as determining if one is about to be caught in an infinite loop, creative art, and mild socializing, that all current AIs are incapable of. From a failing attempt of an AI to accomplish any of the three, we see the same root problem: the AI cannot adequately assess what it doesn't know, making a reasonable assumption based on a sufficient amount of evidence.

Let us return to the aforementioned situation, a time of leisure, and suppose we find ourselves in the company of $\geq 2$ other people, and that there is rain. The odds are slim that the Game chosen will be Combinatoric: likely, there will be randomly drawn cards, hidden from view of the other players. Over the past 25 years, the board game industry has grown massively, and as such the average modern board game involves many more strategic variables, at least one of which is usually a specialized deck. Consider modern classics such as Catan, Ticket to Ride, and Pandemic: chance is present in all three. The effect of the inclusion of unknowns into a game is variable: among humans, there exists a sentiment that games of chance or hiding are less difficult to play well than more ``pure" abstract strategy games: where in the latter one's win is a sheer show of force, some unknowable portion of the credit in one's win in the former is thought to be due only to fate. Regardless of whether this sentiment is true, it is certain that non-Combinatoric games are more difficult for the AI algorithms in Ludii, a powerful, recent, open-source General Game System written in Java. 

A General Game System needs two things to work: a syntax through which one can describe the components and rules of an arbitrary game, and an AI that compiles the game description and engages in dynamic, intelligent play. The most common algorithm for this purpose is that mentioned above, MCTS. For a reasonable AI performance, it is sufficient to provide a ruleset. All Ludii AIs take in a tokenized version of the game description at outset in order to judge the value of any legal move. They can become quite complicated, but below is a sample of the implementation of Tic-Tac-Toe, which is not. 

\begin{lstlisting}
(game "Tic-Tac-Toe" 
    (players 2) 
    (equipment { 
        (board (square 3)) 
        (piece "Disc" P1) 
        (piece "Cross" P2) 
    }) 
    (rules 
        (play (move Add (to (sites Empty))))
        (end (if (is Line 3) (result Mover Win)))
    )
)
\end{lstlisting}

Ludii's syntax, when it released in 2017, was a massive improvement on existing game description languages. It takes far less time to write a Ludii description, because the language is very robust, allowing complex statements to be expressed succinctly. It has about 1,500 games available on its website, simultaneously a feat of computation and anthropology. However, at the beginning of the summer, there were no card games, because the AI cheats.

\section{In Search of An Honest UCT Search}
\subsection{The AIs Cheat}

The first essential issue that I faced this summer was that information could not really be hidden in Ludii. Syntactically, there is a robust suite of aspects of an in-game situation that can be "set Hidden", but doing so did not impact what the AIs were able to see in any way. This is because, on setting something invisible to a particular player, one passes the "context", which is essentially the board position, through a function called "InformationContext" which removes the necessary information. This method, on occurance, only updated the GUI, meaning that the AIs were free to cheat. Reading through the source code makes this clear, but I used a couple of tools to verify this as I tested potential solutions. 

\subsection{The Monty Hall Problem}

The Monty Hall Problem is a classic, counterintuitive probability puzzle from the '70s, which is as follows. At outset, there exist three doors, behind two of which lie goats (worthless), and one, a car (good). The protagonist (person A) chooses a door, gaining some affinity for it in the process, and then the host (person B) opens one of the two remaining doors, revealing the goat. Thus, of the three doors, one is totally out of the running, one is the current choice, and one remains a possibility. Person B is about to ask if you want to switch.

\vspace{1.9mm}

\begin{tabular}{ |p{2cm}||p{3.5cm}|p{3.5cm}|  }
 \hline
 \multicolumn{3}{|c|}{Monty Hall Problem} \\
 \hline
     &A chose Car ($P(\frac{1}{3})$) &A Chose Goat ($P(\frac{2}{3})$)\\
 \hline
 Car &Choice &Switch\\
 Goat&Out    &Out\\
 Goat&Switch &Choice\\
 \hline
\end{tabular}

\vspace{1.9mm}

This means that there is a 2 in 3 probability that you're on the left side of the chart, where switching will get you the car. The Ludii implementation, as a one-player game, attempts to set what is behind the doors hidden: one would expect that a reasonable AI would approach a 2/3 win rate. However, I have found that all existing Ludii AIs win 100\% of the time. A similar, more brute test, that I called ``The Game Of Nil", is in the attached Github repository of finished Ludii games. It, too, showed that the Ludii AIs all cheat, although it demonstrated this a bit quicker. 

\subsection{An Example Shell Method}

To remedy this, for any given AI, there probably exist many solutions, but the one that I found was to make a shell method in the ``LudiiExampleAI" package, which passes a context through the InformationContext method, filtering out the specified information and doing nothing otherwise. One can then pass the resulting context into the AI, provided, on instantiation in the method AI.java, the boolean "wantsCheatRNG" is set to false. The below method does this for the standard ``UCT" implementation. 

\begin{lstlisting}

package mcts;

import game.Game;
import other.AI;
import other.context.Context;
import other.context.InformationContext;
import other.move.Move;

import search.mcts.MCTS;

//  Thank you to Victor Putrich, who did this in https://github.com/schererl/FinalYearProject/tree/main/src.

public class MCTSStoHI extends AI
{
	
	protected int player = -1;
	private MCTS UCT_Ludii;
	public MCTSStoHI()
	{
		this.friendlyName = "MCTSStoHI";
	}
	
	@Override
	public Move selectAction
	(
		final Game game,
		final Context context, 
		final double maxSeconds, 
		final int maxIterations, 
		final int maxDepth
	)
	{
		Move selectedMove=UCT_Ludii.selectAction(game, new InformationContext(context,player), maxSeconds, maxIterations, maxDepth);
		return selectedMove;
	}
	
	@Override
	public void initAI(final Game game, final int playerID)
	{
		this.player = playerID;
		UCT_Ludii = MCTS.createUCT();
		UCT_Ludii.initAI(game, playerID);
	}
	
	@Override
	public boolean supportsGame(final Game game)
	{
		if (!game.isAlternatingMoveGame())
			return false;
		
		return true;
	}
}

\end{lstlisting}

With this AI, I have found honest behavior within The Monty Hall Problem and The Game of Nil, and competitive play with the normal UCT in perfect-information games like Hex. The below chart shows 20 instances of the Monty Hall Problem, with this AI.

\begin{tikzpicture}
\begin{axis}[
    title={20 Runs of Monty Hall Problem With 3 AIs},
    xlabel={Instances},
    ylabel={Wins},
    xmin=0, xmax=20,
    ymin=0, ymax=20,
    xtick={0,4,8,12,16,20},
    ytick={0,4,8,12,16,20},
    legend pos=north west,
    ymajorgrids=true,
    grid style=dashed,
]

\addplot[
    color=blue,
    mark=square,
    ]
    coordinates {
    (0,0)(4,0)(8,2)(12,5)(16,8)(20,9)
    };
    \legend{Random}

\addplot[
    color=red,
    mark=square,
    ]
    coordinates {
    (0,0)(4,4)(8,8)(12,12)(16,16)(20,20)
    };
    \addlegendentry{Cheating MCTS}

\addplot[
    color=green,
    mark=square,
    ]
    coordinates {
    (0,0)(4,0)(8,2)(12,5)(16,7)(20,9)
    };
    \addlegendentry{Honest MCTS}
    
\end{axis}
\end{tikzpicture}

This illustrates what I've found after various more involved experiments: the Ludii AIs designed for perfect information games are not well-suited to hidden information games, even if they are able to play them, usually performing comparably to a random player, and being demolished by an intelligent, cheating player. I plan on working toward a more strategic Honest MCTS in Ludii over the next year, taking inspiration from the implementation that my advisor, Dr. Mark Goadrich, uses for this purpose in CardStock. The ability to communicate incomplete situations to AI is essential to a card-capable general games system, and this simple solution does not degrade decision time or performance in perfect information games.

\section{Experimental Modifications}

The Deck Ludeme posits itself as a container distinct from the rest of the board, but is in actuality a Stack. In line 2725 of Game.java, the Card components get shuffled and then placed like this.

\begin{lstlisting}
    for (int i = 0; i < nbCards; i++)
		{
	   	  final int j = (context.rng().nextInt(components.size()));
		  final int index = components.getQuick(j);
		final StartRule rule = new PlaceCustomStack("Card" + index,...
\end{lstlisting}

The Stack, in Ludii, is not defined as a Component or Container. It is a set of components placed with one command, but does not function as an object. As it stands, they can only exist up to a size of 32, at which point the Stack must become a "LargeStack", which the user is unable to set Hidden, or gauge the size of. In almost every card game, one hides some cards from the other players: this was not possible for me with the current Deck Ludeme. For example, the following program compiles, but no cards are dealt, and Player 1 wins automatically.

\begin{lstlisting}
(game "DECK"
  (players 3)
  (equipment {
    (board (square 10))
    (deck {(card Seven rank:0 value:0 trumpRank:0 trumpValue:0)
           (card Eight rank:1 value:0 trumpRank:1 trumpValue:0)
           (card Nine rank:2 value:0 trumpRank:6 trumpValue:14)
           (card Ten rank:3 value:10 trumpRank:4 trumpValue:10)
           (card Jack rank:4 value:2 trumpRank:7 trumpValue:20)
           (card Queen rank:5 value:3 trumpRank:2 trumpValue:3)
           (card King rank:6 value:4 trumpRank:3 trumpValue:4)
           (card Ace rank:7 value:11 trumpRank:5 trumpValue:11)})
    (hand Each size:2)
  })
  (rules
    (start {(deal Cards 2)})
    (play (move (from (sites Hand Mover)) (to (sites Empty))))
    (end (if "HandEmpty" (result Mover Win)))
  )
)
\end{lstlisting}

The one other Dealable Type is the Domino, which renders correctly, but deals only half of what it's told.

\begin{lstlisting}
(game "DOMINO"
    (players 4)
    (equipment
        {
            (board (square 20))
            (dominoes)
            (hand Each size:7)
        }
    )
    (rules
        (start { 
            (deal Dominoes 7) 
        }        )
        (play (move (from (sites Hand Mover)) (to (sites Empty))))
        (end (if "HandEmpty" (result Mover Win)))
    )
)
\end{lstlisting}

This issue is comparatively easy to fix: change line 161 of Deal.java from 

\begin{lstlisting}
while (dealed < (count * 2))
\end{lstlisting}

to 

\begin{lstlisting}
while (dealed < (count * context.game().players().count()))
\end{lstlisting}

This makes the above code properly deal. I was not able to find a comparable fix to the issue with dealing cards: the largeStack has a great many methods that still must be done (see ContainerStateStacksLarge.java, lines 864-908), and hiding $<32$-tall stacks is difficult, often breaking the engine. I found some mixed results modifying the source code, adding filters to avoid IndexOutOfBoundsExceptions on each "isHidden" boolean. After a while, I decided to use a different tactic to render card games in Ludii.

\section{How to Shuffle in Ludii}

The ``Piece" Ludeme is the standard component in Ludii. One may name it, and draw it in a way that depends on a variety of variables. The most important existing game in the library for this development was Quarto, an abstract-strategy game that I had played extensively, though always with cards. It involves sixteen pieces, each with four dichotomous attributes: one or two, small or large, black or red, square or circle. The players take turns laying one down of their opponent's choice, attempting to make a line of four with at least one attribute entirely in common. With the implementation of this game, I had pieces that carried various integer values, which were capable of affecting scoring. After some light trial and error, I had a functional adding game, 98, where cards were instantiated by a simple random number generator, written in Ludii as "(value Random (range 1 13))". However, in many card games, the fact that cards are selected without replacement is crucial to strategy: one such example is ``Hearts". My first strategy, of a stack that is either placed randomly or selected from randomly, works, as shown in the ``ShuffleStack.lud" file in the attached Github Repository. However, as detailed above, I ran into a litany of issues setting stacks Hidden, and (after some failed experiments with manual Knuth-shuffling with a sea of variables, modular multiplication, and the "RememberValues" ludeme), I went with Place Random (sites), hiding the board one unit at a time from the AIs. Large stacks jut out from the game board along a z-axis, visibly slowing startup and AI speeds. This method, as described below, using "Place Random" instead of "Place Stack", does not.

\begin{lstlisting}
(define "SetHiddenEach"
   (set Hidden What (sites Hand P1) to:P2)   
   (set Hidden What (sites Hand P1) to:P3)   
   (set Hidden What (sites Hand P1) to:P4)
   (set Hidden What (sites Hand P2) to:P1)   
   (set Hidden What (sites Hand P2) to:P3)   
   (set Hidden What (sites Hand P2) to:P4)
   (set Hidden What (sites Hand P3) to:P1)   
   (set Hidden What (sites Hand P3) to:P2)   
   (set Hidden What (sites Hand P3) to:P4)
   (set Hidden What (sites Hand P4) to:P1)   
   (set Hidden What (sites Hand P4) to:P2)   
   (set Hidden What (sites Hand P4) to:P3)         
)

//------------------------------------------------------------------------------        
(game "Shuffle" 
    (players 4) 
    (equipment { 
        (board (rectangle 1 16) ) 
        (piece "Square"    Shared) (piece "Square1"   Shared) 
        (piece "Square2"   Shared) (piece "Square3"   Shared)
        (piece "Square4"   Shared) (piece "Square5"   Shared)
        (piece "Square6"   Shared) (piece "Square7"   Shared)        
        (piece "Square8"   Shared) (piece "Square9"   Shared)      
        (piece "Square10"  Shared) (piece "Square11"  Shared)
        (piece "Square12"  Shared) (piece "Square13"  Shared)       
        (piece "Square14"  Shared) (piece "Square15"  Shared)
        (piece "Square16"  Shared) (piece "Square17"  Shared)
        (piece "Square18"  Shared) (piece "Square19"  Shared)       
        (piece "Square20"  Shared) (piece "Square21"  Shared)     
        (piece "Square22"  Shared) (piece "Square23"  Shared)
        (piece "Square24"  Shared) (piece "Square25"  Shared)       
        (piece "Square26"  Shared) (piece "Square27"  Shared)     
        (piece "Square28"  Shared) (piece "Square29"  Shared)
        (piece "Square30"  Shared) (piece "Square31"  Shared)
        (piece "Square32"  Shared) (piece "Square33"  Shared)     
        (piece "Square34"  Shared) (piece "Square35"  Shared)
        (hand Each size:6) 
   }) 
                
    (rules
        (start {
            (place Random (sites (union (array {1..5}) (array {10..39})))
               {"Square1"   "Square2"   "Square3"    "Square4"   "Square5"
                "Square6"   "Square7"   "Square8"    "Square9"   "Square10"
                "Square11" "Square12" "Square13" "Square14" "Square15"             
                "Square16" "Square17" "Square18" "Square19" "Square20"
                "Square21" "Square22" "Square23" "Square24" "Square25"             
                "Square26" "Square27" "Square28" "Square29" "Square30"          
                "Square31" "Square32" "Square33" "Square34" "Square35"})
            (forEach Player (set Hidden (sites (union (array {1..5}) (array {10..15}))) to:Player))
            "SetHiddenEach"
        }) 
        (play (move  Pass))
        (end {(if ("HandEmpty" Next) (byScore))})
    )
) 

//------------------------------------------------------------------------------     
        
        (metadata    
            (graphics {
                (piece Foreground "Square1"  image:"0"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square2"  image:"0"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square3"  image:"0"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square4"  image:"0"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square5"  image:"1"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square6"  image:"1"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square7"  image:"1"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square8"  image:"1"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square9"  image:"2"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square10" image:"2"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square11" image:"2"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square12" image:"2"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square13" image:"3"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square14" image:"3"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square15" image:"3"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square16" image:"3"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square17" image:"4"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square18" image:"4"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square19" image:"4"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square20" image:"4"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square21" image:"5"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square22" image:"5"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square23" image:"5"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square24" image:"5"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square25" image:"6"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square26" image:"6"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square27" image:"6"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square28" image:"6"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square29" image:"7"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square30" image:"7"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square31" image:"7"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (piece Foreground "Square32" image:"7"  fillColour:(colour Hidden) edgeColour:(colour Black)  scale:0.7)
                (piece Foreground "Square33" image:"8"  fillColour:(colour Hidden) edgeColour:(colour Red)    scale:0.7)
                (piece Foreground "Square34" image:"8"  fillColour:(colour Hidden) edgeColour:(colour Yellow) scale:0.7)
                (piece Foreground "Square35" image:"8"  fillColour:(colour Hidden) edgeColour:(colour Blue)   scale:0.7)
                (show Edges Hidden)                                                  
                (show Symbol "Hexagon" (sites Board) fillColour:(colour 185 130 85) edgeColour:(colour 225 182 130)) 
                (board Placement scale:5)
                (stackType None)
                (board Background image:"square.svg" fillColour:(colour 185 130 85) edgeColour:(colour 185 130 85) scale:1.45)
            })
        )
\end{lstlisting}

At the beginning of the summer I wrote Coup in CardStock, then I moved to Ludii, writing three card games and three abstract games: Agram, Hearts, 98, Teeko, Hexade, and Catchup. I began work on many more games, such as Poker, Bottle Imp, Uno, War, Blackjack, Oswald, Minesweeper, and much more, which I plan on continuing to work on over the next year. In most card games, I have utilized this method.

\section{Further Work}

I plan to continue working in Ludii over the next year. In this time, my primary goal will be to create a more capable honest AI for games of hidden information in Ludii. I plan on utilizing methods employed by Dr. Goadrich in CardStock, existing Ludii AIs, including both those in the source code and these, as well as mathematical methods introduced by Nash and Conway.

I also plan to implement more card games within Ludii, potentially attempting to translate the suite of more than 30 available games in CardStock. CardStock gathers Heuristics about games hosted within it, such as Convergence, Drama, Fairness, and Spread, which are valuable to a game designer who wants to assure that these factors are in balance. I plan to implement similar heuristics in Ludii. 

An ancillary goal is the application of AI capable of handling hidden information towards a heuristic that CardStock cannot account for: Solvability. Ludii contains syntactic support for deduction puzzles, and the Ludii team has written about utilizing the XCSP format in tandem with Ludii to solve NP-Complete puzzles like Sudoku and Nonograms. With a randomly set board, and an AI that assures a threshold "Solvability" metric, I believe that procedurally generated deduction-puzzles and stochastic environments can be generated within Ludii. 


\section{Sources}



1. https://en.yna.co.kr/view/AEN20191127004800315

2. https://www.theguardian.com/technology/2014/nov/25/board-games-internet-playstation-xbox

\end{document}
