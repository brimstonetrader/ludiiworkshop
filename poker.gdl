;; POKER simple rules
;;
;; https://www.contrib.andrew.cmu.edu/~gc00/reviews/pokerrules

(game
 (setup  
  (create players 5)
  (create teams (0) (1) (2) (3) (4))
  (create deck (game iloc STOCK) (deck (RANK  (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                       (COLOR (RED (SUIT   (HEARTS, DIAMONDS)))
                                            (BLACK (SUIT (CLUBS,    SPADES)))))))          
 
 ;; Set up the game with 100 dollars per person and 2 cards
 (do (
  (shuffle (game iloc STOCK))
  (set (game sto ROUNDS) 0)
  (all player 'P 
   (do (
    (repeat 2 
     (move (top (game iloc STOCK))
      (top ('P iloc HAND))))
    (set ('P sto CHIPS) 100))))
    
  (put points 'SCORE (
            ((RANK (A))    12)
            ((RANK (K))    11) 
            ((RANK (Q))    10)
            ((RANK (J))     9)
            ((RANK (TEN))   8)
            ((RANK (NINE))  7)
            ((RANK (EIGHT)) 6)
            ((RANK (SEVEN)) 5)
            ((RANK (SIX))   4)
            ((RANK (FIVE))  3)
            ((RANK (FOUR))  2)
            ((RANK (THREE)) 1)
            ((RANK (TWO))   0)))
            
  (put points 'CLUBS (
            ((SUIT (CLUBS))      1)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     0)))
  (put points 'DIAMONDS (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   1) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     0)))           
  (put points 'HEARTS (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     1)
            ((SUIT (SPADES))     0)))  
  (put points 'SPADES (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     1)))))
 
 (stage player
  (end (== (game sto ROUNDS) 5)) 
  
  (do ((inc (game sto ROUNDS) 1)))
  
  ;; bidding
  (stage player
   
   (end (all player 
    'P (> ('P sto BET) 0)))
   
   (choice ((any (range 1..10) 'B
    (set ((current player) sto BET) 'B)))))
   
  ;; Players get first five cards
  
  (stage player
   (end (all player 'P (== ('P sto FINISHED) 1)))
   (do (
    (repeat 5 ((move (top (game iloc STOCK)) (top ((current player) iloc HAND)))))
    (choice 
    
    ;; Discard 0
    
    (do (
     turn pass))
     
    ;; Discard 1
     
    (do (
     (any ((current player) iloc HAND) 'C 
         (move 'C (top (game vloc DISCARD))))))
       
    ;; Discard 2
     
    (do (
     (any ((current player) iloc HAND) 'C 
      (move 'C (top (game vloc DISCARD))))
     (any ((current player) iloc HAND) 'C 
      (move 'C (top (game vloc DISCARD))))))
   
    ;; etc.
   
    (do (
     (any ((current player) iloc HAND) 'C 
      (move 'C (top (game vloc DISCARD))))
     (any ((current player) iloc HAND) 'C 
      (move 'C (top (game vloc DISCARD))))
     (any ((current player) iloc HAND) 'C 
      (move 'C (top (game vloc DISCARD))))))))))
      
 ;; Second round of bidding
 
   (stage player
    (end (all player 'P (> ('P sto BET2) 0)))
    (choice (any (range 1..10) 'B
     (do ((set ((current player) sto BET2) 'B)
          (inc ((current player) sto BET) ((current player) sto BET2)))
               
         ;; Draw (5 - #cardsinhand) cards.     
 
         (repeat (- 5 (size ((current player) iloc HAND))) 
              (move (top (game iloc STOCK)) 
                     (top ((current player) iloc HAND))))))))
               
   ;;   Tally Score   
    
   ;;   0-12  -> Junk hands ranked by highest card (impossible to get 0-4, but makes code cleaner)
   ;;    find highest card in hand
   ;;    set score = maxinhand[card[value]] 
   ;;  13-25  -> One Pair by what it is (ties are allowed)
   ;;    if for any rank S the sum of cards in the hand of rank S is 2 then the score is (13+value[thecardthatthepairis]) 
   ;;  26-181 -> Two Pair by first then next (many unnecessary scores to make calculations easier)
   ;;    if (score > 12) 
   ;;    then if for any rank S 
   ;;             the sum of cards in the hand of rank S with value (score-13) is 2 
   ;;         and the sum of cards in the hand of rank S with value j is 2 
   ;;         then newscore = (if (j>(score-13) then (j*13 + (score-13) + 26))
   ;;                     else if (j<(score-13) then (13*(score-13) + j + 26) 
   ;;                        else score             
   ;; 182-194 -> Three of a Kind
   ;;    if for any rank S
   ;;        the sum of cards in the hand of rank S with value j is 3 
   ;;         score = 182+j
   ;; 195-207 -> Straight (once again, 197 196, 195, and 194 are impossible)
   ;;    if for any rank S and value j
   ;;        the sum of cards in the hand of rank S with value j is 1
   ;;    and the sum of cards in the hand of value j+1 is 1
   ;;    and the sum of cards in the hand of value j+2 is 1
   ;;    and the sum of cards in the hand of value j+3 is 1 
   ;;    and the sum of cards in the hand of value j+4 is 1
   ;;    then score=195+j+4
   ;; 208-220 -> Same Suit by highest card
   ;;    if for any suit S
   ;;        the sum of cards in the hand of suit S is 5 
   ;;         score = 208+max[cardinhand[value]] 
   ;; 218-230 -> Full House (a tie on the three is impossible)
   ;;    if (181<score<195) then if for any rank S with value j
   ;;                                the sum of cards in the hand of rank S is 2
   ;;                          then newscore = 218+(oldscore-181)
   ;; 231-243 -> Four-of-a-Kind
   ;;    if for any rank S
   ;;        the sum of cards in the hand of rank S with value j is 4
   ;;         score = 231+j
   ;; 244-253 -> Suit Run
   ;;    if (for any rank S and value j
   ;;         the sum of cards in the hand of rank S with value j   is 1
   ;;     and the sum of cards in the hand of             value j+1 is 1
   ;;     and the sum of cards in the hand of             value j+2 is 1
   ;;     and the sum of cards in the hand of             value j+3 is 1 
   ;;     and the sum of cards in the hand of             value j+4 is 1) and 
   ;;    if (for any suit S
   ;;        the sum of cards in the hand of suit S is 5 
   ;;         score = 244+j)    
   ;; All but one of these ranges is divisible by 13, ordered by the main 'SCORE pointmap.
               
   (stage player
    (end (all player 'P (> ('P sto POINTS) 0))) 
    
    (do (let (max (((current player) iloc HAND) using 'SCORE)) 'HIGHCARD 
     (do (
   
      ;; Duplicate
    
      (any ((current player) iloc HAND) 'C ( 
       (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 2)
        (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 13))))
   
    ;; Dual Duplicate

      ((any ((current player) iloc HAND) 'C ( 
     
	   (and 
        (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 2)
        (any ((current player) iloc HAND) 'C2 ( 
         (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 2))))
       
       (do (
        ((< (score 'C using 'SCORE) (score 'C2 using 'SCORE))
         (set ((current player) sto POINTS)  (+ (* (score 'C2 using 'SCORE) 13) 
                                             (+    (score 'C  using 'SCORE) 13))))                                                
        ((> (score 'C using 'SCORE) (score 'C2 using 'SCORE))
         (set ((current player) sto POINTS) (+ (* (score 'C  using 'SCORE) 13) 
                                            (+    (score 'C2 using 'SCORE) 13)))))))))
 
    ;; Triplicate
    
    (any ((current player) iloc HAND) 'C ( 
     (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 3)
      (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 182))))   
   
    ;; Straight
    
    (any ((current player) iloc HAND) 'C (    
     let ((score 'C using 'SCORE) 'B 
      ((and (and (and
       (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 1)) 
       (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 2))) 
       (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 3))) 
       (or (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 4))
           (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 12))))) 
        (set ((current player) sto POINTS) (+ ('B) 199)))))
    
    ;; Same Suit

    ((or (or (or (== (sum ((current player) iloc HAND) using 'CLUBS)    5) 
                 (== (sum ((current player) iloc HAND) using 'DIAMONDS) 5)) 
                 (== (sum ((current player) iloc HAND) using 'HEARTS)   5)) 
                 (== (sum ((current player) iloc HAND) using 'SPADES)   5))
      (set ((current player) sto POINTS) (+ (score ('HIGHCARD) using 'SCORE) 208)))
     
    ;; Full House

    ((and (any ((current player) iloc HAND) 'C ( 
           (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 3)))
          (any ((current player) iloc HAND) 'C2 ( 
           (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)2))) 2))))
      (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 218)))

    ;; Quadruplicate      
    
    ((any ((current player) iloc HAND) 'C ( 
     (== (sum (filter ((current player) iloc HAND) 'H (== (cardatt RANK 'C)))) 4)
      (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 231)))))    
      
    ;; Suit Run

    ((and ((or (or (or (== (sum ((current player) iloc HAND) using 'CLUBS)    5) 
                       (== (sum ((current player) iloc HAND) using 'DIAMONDS) 5)) 
                       (== (sum ((current player) iloc HAND) using 'HEARTS)   5)) 
                       (== (sum ((current player) iloc HAND) using 'SPADES)   5))) 
          ((any ((current player) iloc HAND) 'C (    
             (let ((score 'C using 'SCORE) 1) 'B 
              ((and (and (and
                (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 1)) 
                (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 2))) 
                (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 3))) 
                (or (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 4))
                    (== (score (any ((current player) iloc HAND)) using 'SCORE) (+ ('B) 12))))))))) 
           (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 218)))))))))
    

 (stage player
  (end (all player 'P (== ('P sto BET) 0)))
  
  (== ((current player) sto POINTS) (max (( player) sto POINTS)))
 
 )

 
 ;; Find score for players
 (stage player
  (end (all player 'P (== ('P sto BET) 0)))
  (do (
   ((== ((current player) sto SCOREHAND) (max (union (all player 'P ('P sto POINTS)))))
    (inc ((current player) sto CHIPS) (sum (union (all player 'P ('P sto POINTS))))))
   ((< ((current player) sto SCOREHAND) (max (union (all player 'P ('P sto POINTS)))))
    (dec ((current player) sto CHIPS) ((current player) sto BET)))
   (set ((current player) sto BET) 0))))
   
 (scoring max ((current player) sto CHIPS)))
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    ;;   Tally Score   
    
   ;;   0-12  -> Junk hands ranked by highest card (impossible to get 0-4, but makes code cleaner)
   ;;    find highest card in hand
   ;;    set score = maxinhand[card[value]] 
   ;;  13-25  -> One Pair by what it is (ties are allowed)
   ;;    if for any rank S the sum of cards in the hand of rank S is 2 then the score is (13+value[thecardthatthepairis]) 
   ;;  26-181 -> Two Pair by first then next (many unnecessary scores to make calculations easier)
   ;;    if (score > 12) 
   ;;    then if for any rank S 
   ;;             the sum of cards in the hand of rank S with value (score-13) is 2 
   ;;         and the sum of cards in the hand of rank S with value j is 2 
   ;;         then newscore =  if (j>(score-13) then (j*13 + (score-13) + 26))
   ;;                     else if (j<(score-13) then (13*(score-13) + j + 26) 
   ;;                        else score             
   ;; 182-194 -> Three of a Kind
   ;;    if for any rank S
   ;;        the sum of cards in the hand of rank S with value j is 3 
   ;;         score = 182+j
   ;; 195-207 -> Straight (once again, 197 196, 195, and 194 are impossible)
   ;;    if for any rank S and value j
   ;;        the sum of cards in the hand of rank S with value j is 1
   ;;    and the sum of cards in the hand of value j+1 is 1
   ;;    and the sum of cards in the hand of value j+2 is 1
   ;;    and the sum of cards in the hand of value j+3 is 1 
   ;;    and the sum of cards in the hand of value j+4 is 1
   ;;    then score=195+j+4
   ;; 208-220 -> Same Suit by highest card
   ;;    if for any suit S
   ;;        the sum of cards in the hand of suit S is 5 
   ;;         score = 208+max[cardinhand[value]] 
   ;; 218-230 -> Full House (a tie on the three is impossible)
   ;;    if (181<score<195) then if for any rank S with value j
   ;;                                the sum of cards in the hand of rank S is 2
   ;;                          then newscore = 218+(oldscore-181)
   ;; 231-243 -> Four-of-a-Kind
   ;;    if for any rank S
   ;;        the sum of cards in the hand of rank S with value j is 4
   ;;         score = 231+j
   ;; 244-253 -> Suit Run
   ;;    if (for any rank S and value j
   ;;         the sum of cards in the hand of rank S with value j   is 1
   ;;     and the sum of cards in the hand of             value j+1 is 1
   ;;     and the sum of cards in the hand of             value j+2 is 1
   ;;     and the sum of cards in the hand of             value j+3 is 1 
   ;;     and the sum of cards in the hand of             value j+4 is 1) and 
   ;;    if (for any suit S
   ;;        the sum of cards in the hand of suit S is 5 
   ;;         score = 244+j)    
   ;; All but one of these ranges is divisible by 13, ordered by the main 'SCORE pointmap.
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   COMPILES SO FAR:
   
   
   ;; POKER simple rules
;;
;; https://www.contrib.andrew.cmu.edu/~gc00/reviews/pokerrules

(game
 (setup  
  (create players 5)
  (create teams (0) (1) (2) (3) (4))
  (create deck (game iloc STOCK) (deck (RANK  (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                       (COLOR (RED (SUIT   (HEARTS, DIAMONDS)))
                                            (BLACK (SUIT (CLUBS,    SPADES)))))))          
 
 ;; Stages of the game
 (stage player
   (end (== (game sto ROUNDS) 20)) 
        (do 
            (
  (put points 'SCORE (
            ((RANK (A))    12)
            ((RANK (K))    11) 
            ((RANK (Q))    10)
            ((RANK (J))     9)
            ((RANK (TEN))   8)
            ((RANK (NINE))  7)
            ((RANK (EIGHT)) 6)
            ((RANK (SEVEN)) 5)
            ((RANK (SIX))   4)
            ((RANK (FIVE))  3)
            ((RANK (FOUR))  2)
            ((RANK (THREE)) 1)
            ((RANK (TWO))   0)))
            
  (put points 'CLUBS (
            ((SUIT (CLUBS))      1)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     0)))
  (put points 'DIAMONDS (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   1) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     0)))           
  (put points 'HEARTS (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     1)
            ((SUIT (SPADES))     0)))  
  (put points 'SPADES (
            ((SUIT (CLUBS))      0)
            ((SUIT (DIAMONDS))   0) 
            ((SUIT (HEARTS))     0)
            ((SUIT (SPADES))     1)))
             (shuffle (game iloc STOCK))
  (all player 'P 
   (do (
    (repeat 5 
     (move (top (game iloc STOCK))
      (top ('P iloc HAND))))
    (set ('P sto CHIPS) 102)
    (set ('P sto BET)     2))))))
        
        ;; players play a round 13 times     
        (stage player
         (end (all player 'P (== ('P sto BET) 0)))
               
               ;; players play a hand once
               (stage player
                      (end (all player 'P (== ('P sto FINISHED) 1)))
                      
                      (choice  
                       (

                           (turn pass)
                           
                          (do (
                           (any ((current player) iloc HAND) 'C (do (
                               (set ((current player) sto FINISHED) 1)
                               (move 'C (top (game vloc DISCARD))))))))



                                                       (do (
                             (any ((current player) iloc HAND) 'C 
                              (move 'C (top (game vloc DISCARD))))
                             (any ((current player) iloc HAND) 'C (do (
                              (set ((current player) sto FINISHED) 1)
                              (move 'C (top (game vloc DISCARD))))))))
                        
                        
                        
                                  (do (
                             (any ((current player) iloc HAND) 'C 
                              (move 'C (top (game vloc DISCARD))))
                             (any ((current player) iloc HAND) 'C 
                              (move 'C (top (game vloc DISCARD))))
                             (any ((current player) iloc HAND) 'C (do (
                              (set ((current player) sto FINISHED) 1)
                              (move 'C (top (game vloc DISCARD))))))))))
                              
                      (choice ((any (range 1..10) 'B
     (do ((set ((current player) sto BETT) 'B)
          (inc ((current player) sto BET) ((current player) sto BETT))
          (inc ((current player) sto FINISHED) 1)
               
         ;; Draw (5 - #cardsinhand) cards.     
 
         (repeat (- 5 (size ((current player) iloc HAND))) 
              (move (top (game iloc STOCK)) 
                     (top ((current player) iloc HAND)))))))))   
                              
                              ))
        
        ;; determine score
         (stage player
     (end (all player 'P (> ('P sto POINTS) 0))) 
     
   
      ;; Duplicate
    
      (do ((any ((current player) iloc HAND) 'C ( 
           any ((current player) iloc HAND) 'CC ( 
          (and (== (cardatt RANK 'C) (cardatt RANK 'CC)) 
               (!= 'C 'CC)))))
          (do(
           (set ((current player) sto POINTS) (+ (score 'C using 'SCORE) 13))
           (inc (game sto ROUNDS) 1)))))))
 
 (scoring max ((current player) sto POINTS)))