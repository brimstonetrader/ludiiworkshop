(define "UpdateRolodex"
    ((if             (= (id P1) (id #1)) (if (is In #2 (values Remembered "P1Cards")) 
                                                   (addScore P1 (- #2) (then (forget Value All (then (set Var 1)))))
                                                   (remember Value "P1Cards" #2))
         (if         (= (id P2) (id #1)) (if (is In #2 (values Remembered "P2Cards")) 
                                                   (addScore P2 (- #2) (then (forget Value All (then (set Var 1)))))
                                                   (remember Value "P2Cards" #2))
             (if     (= (id P3) (id #1)) (if (is In #2 (values Remembered "P3Cards")) 
                                                   (addScore P3 (- #2) (then (forget Value All (then (set Var 1)))))
                                                   (remember Value "P3Cards" #2))
                 (if (= (id P4) (id #1)) (if (is In #2 (values Remembered "P4Cards")) 
                                                   (addScore P4 (- #2) (then (forget Value All (then (set Var 1)))))
                                                   (remember Value "P4Cards" #2)))))))

)


(define "SimpSwitch"
    (if (and {(< (what at:(mapEntry "Init" P1)) (what at:(mapEntry "Init" P2))) 
              (< (what at:(mapEntry "Init" P1)) (what at:(mapEntry "Init" P3))) 
              (< (what at:(mapEntry "Init" P1)) (what at:(mapEntry "Init" P4)))})
                (set NextPlayer (player 1))
                (if (and (< (mapEntry "Init" P2) (mapEntry "Init" P3)) 
                         (< (mapEntry "Init" P2) (mapEntry "Init" P4)))
                            (set NextPlayer (player 2)) 
                            (if (< (mapEntry "Init" P3) (mapEntry "Init" P4))
                                (set NextPlayer (player 3))  
                                (set NextPlayer (player 4))))) 
)

//------------------------------------------------------------------------------>
(game "Pairs" 
    (players 4) 
    (equipment { 
        (board (rectangle 11 5)) 
        (piece "Square"   Shared)
        (piece "Square1"   Shared)
        (piece "Square2"   Shared)
        (piece "Square3"   Shared)
        (piece "Square4"   Shared)
        (piece "Square5"   Shared)
        (piece "Square6"   Shared)
        (piece "Square7"   Shared)
        (piece "Square8"   Shared)
        (piece "Square9"   Shared)
        (piece "Square10"  Shared)
        (hand Each size:8) 
        (map "Pen" {(pair P1 1) (pair P2 2) (pair P3 3) (pair P4 4)})
        (map "Init"  {(pair P1 5) (pair P2 13) (pair P3 21) (pair P4 29)})
        })   
                
            
            
            (rules
                (start {
                (place Random (sites {0..54}) {"Square1"  
                                    "Square2"  "Square2"  
                                    "Square3"  "Square3"  "Square3"  
                                    "Square4"  "Square4"  "Square4"  "Square4"  
                                    "Square5"  "Square5"  "Square5"  "Square5"  "Square5"  
                                    "Square6"  "Square6"  "Square6"  "Square6"  "Square6"  "Square6"  
                                    "Square7"  "Square7"  "Square7"  "Square7"  "Square7"  "Square7"  "Square7"  
                                    "Square8"  "Square8"  "Square8"  "Square8"  "Square8"  "Square8"  "Square8"  "Square8"  
                                    "Square9"  "Square9"  "Square9"  "Square9"  "Square9"  "Square9"  "Square9"  "Square9"  "Square9"  
                                    "Square10" "Square10" "Square10" "Square10" "Square10" "Square10" "Square10" "Square10" "Square10" "Square10"           
                                   
                                              } )
                }) 
                phases:{
                    
                
                (phase "Discard"
                    (play (move Pass 
                             (then (forEach Value min:1 max:2
                                 (remove (sites Random (difference (sites Board) (sites Empty)))) 
                             (then (forEach Player 
                                 (fromTo (from (sites Random (difference (sites Board) (sites Empty)))) 
                                               (to  (handSite Player 0))
                                               (then  ("UpdateRolodex" Player (what at:(to))))) (then "SimpSwitch")))))))
                (nextPhase "HitorMiss"))                
                
                               

                (phase "HitorMiss" 
                    (play 
                            (or {
                                (move Select (from (coord:"A1")) (then (fromTo
                                    (from (coord:"A1") level:(value Random (range 1 (- 33 (count Turns)))))
                                    (to (intersection (sites Hand Mover) (sites Empty)))
                                    (then ("UpdateRolodex" Player (what at:(to)))))))
                                (move Select (from (coord:"B1")) (then
                                    (addScore Mover (min (union {(values Remembered "P1Cards")
                                                              (values Remembered "P2Cards")
                                                              (values Remembered "P3Cards")
                                                              (values Remembered "P4Cards")})) 
                                            (then (forget Value All 
                                            (then (set Var 1)))))))})                            
                    ) (nextPhase (= (var) 1) "Discard")
                )
                
                (phase "Discard" 
                    (play 
                      (move Pass (then (set Var 0 (then  
                        (forEach Player 
                          (forEach Value min:0 max:7 
                            (remove (handSite Player (value)))))))))                            
                    ) (end {(if (< (score Prev) (- 7)) (result Prev Loss))}) (nextPhase "Discard")
                )
                
            }
        )
    )
        
        
        
        (metadata    
            (graphics {
                (piece Foreground "Square")
                (piece Foreground "Square1"  image:"1"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square2"  image:"2"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square3"  image:"3"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square4"  image:"4"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square5"  image:"5"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square6"  image:"6"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square7"  image:"7"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square8"  image:"8"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square9"  image:"9"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (piece Foreground "Square10" image:"X"  fillColour:(colour Hidden) edgeColour:(colour Black) scale:0.6)
                (show Edges Hidden)                                                  
                (show Symbol "Hexagon" (sites Board) fillColour:(colour 185 130 85) edgeColour:(colour 225 182 130)) 
                (board Placement scale:0.8)
                (stackType None)
                (board Background image:"square.svg" fillColour:(colour 185 130 85) edgeColour:(colour 185 130 85) scale:1.45)
            })
        )




